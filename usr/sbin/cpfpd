#!/usr/bin/python

## Copyright (C) Amnesia <amnesia at boum dot org>
## Copyright (C) 2014 troubadour <trobador@riseup.net>
## Copyright (C) 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

# This filter proxy should allow Torbutton to request a
# new Tor circuit, without exposing dangerous control requests
# like "GETINFO address" to applications running as a local user.

# If something goes wrong, an error code is returned, and
# Torbutton will display a warning dialog that New Identity failed.

import daemon
from daemon import runner
import gevent
from gevent import socket
from gevent.server import StreamServer
import binascii
import os
import glob
import logging
import signal
import sys


class Configuration:
    def read(self):
        # Read and override configuration from files
        if os.path.exists('/etc/cpfpy.d'):
            files = sorted(glob.glob('/etc/cpfpy.d/*.conf'))

            if files:
                conf_found = False
                RequestList = ''
                for conf in files:
                    if not conf.endswith('~') and conf.count('.dpkg-') == 0:
                        conf_found = True
                        with open(conf) as c:
                            for line in c:
                                if '=' in line:
                                    k, value = line.split('=')

                                    if k == 'CONTROL_PORT_FILTER_DISABLE_FILTERING':
                                        self.DISABLE_FILTERING = value.strip() == 'true'

                                    if k == 'CONTROL_PORT_FILTER_LIMIT_STRING_LENGTH':
                                        self.LIMIT_STRING_LENGTH = int(value.strip())

                                    if k == 'CONTROL_PORT_FILTER_ALLOW_WILDCARDS':
                                        self.ALLOW_WILDCARDS = value.strip() == 'true'

                                    if k ==  'CONTROL_PORT_FILTER_LIMIT_GETINFO_NET_LISTENERS_SOCKS':
                                        self.LIMIT_GETINFO_NET_LISTENERS_SOCKS = value.strip() == 'true'

                                    if k == 'CONTROL_PORT_FILTER_WHITELIST':
                                        # concatenate values from files, add a comma
                                        RequestList = RequestList + value.strip() + ','

                                    if k == 'CONTROL_PORT_FILTER_PORT':
                                        self.PORT = int(value.strip())

                                    if k == 'CONTROL_PORT_FILTER_IP':
                                        self.IP = str(value.strip())

                                    if k == 'CONTROL_PORT_SOCKET':
                                        self.SOCKET = str(value.strip())

                                    if k == 'CONTROL_PORT_AUTH_COOKIE':
                                        self.AUTH_COOKIE = str(value.strip())

                                    if k == 'CONTROL_PORT_FILTER_CONCURRENT_CONNECTIONS_LIMIT':
                                        self.CONTROL_PORT_FILTER_CONCURRENT_CONNECTIONS_LIMIT = int(value.strip())

                if not conf_found:
                    self.set_default()
                    return ('No valid file found in user configuration folder "/etc/cpfpy.d".'\
                            ' Running with default configuration.')

                # Disable limit.
                if self.LIMIT_STRING_LENGTH == -1:
                    # "sock.recv()" requires an argument. 64 KB, arbitrary.
                    self.LIMIT_STRING_LENGTH = 65536

                self.WHITELIST = RequestList.split(',')
                # Remove last element (comma)
                self.WHITELIST.pop()
                # Remove duplicates
                self.WHITELIST = list(set(self.WHITELIST))

            else:
                self.set_default()
                return('No file found in user configuration folder "/etc/cpfpy.d".'\
                        ' Running with default configuration.')

        else:
            self.set_default()
            return('User configuration folder "/etc/cpfpy.d" does not exist.'\
                    ' Running with default configuration.')

    def set_default(self):
        # Default control port filer configuration
        self.IP = '10.152.152.10'
        self.PORT = 9052
        self.SOCKET = '/var/run/tor/control'
        self.AUTH_COOKIE = '/var/run/tor/control.authcookie'
        self.DISABLE_FILTERING = False
        self.LIMIT_STRING_LENGTH = 16384
        self.LIMIT_GETINFO_NET_LISTENERS_SOCKS = True
        self.WHITELIST = ['signal newnym', 'getinfo net/listeners/socks',
                    'getinfo status/circuit-established', 'quit']
        self.CONTROL_PORT_FILTER_CONCURRENT_CONNECTIONS_LIMIT = 5


class UnexpectedAnswer(Exception):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return "[UnexpectedAnswer] " + self.msg


class ControlPortFilter():
    def __init__(self):
        self.stdin_path = '/dev/null'
        self.stdout_path = '/dev/null'
        self.stderr_path = '/dev/null'
        self.pidfile_path =  '/var/run/control-port-filter-python/pid'
        self.pidfile_timeout = 5

    def signal_sigterm_handler(self):
        logger.warning('Signal sigterm received. Exiting.')
        sys.exit(143)

    def do_request(self, request, incoming_socket):
        logger.debug('AAA')
        try:
            logger.debug('BBB')
            self.do_request_real(request, incoming_socket)
            logger.debug('DDD')
            return True
        except:
            logger.critical('ERROR ', sys.exc_info()[0])

    def do_request_real(self, request, incoming_socket):
        logger.debug('CCC')
        # Check if tor socket exists
        if not os.path.exists(self.configuration.SOCKET):
            logger.critical('Tor socket: "%s" does not exist' % (self.configuration.SOCKET))
            return

        # Catch innocent exceptions, will report error instead
        try:
           # Read authentication cookie
           with open(self.configuration.AUTH_COOKIE, "rb") as f:
               rawcookie = f.read(32)
               hexcookie = binascii.hexlify(rawcookie)

               # Connect to the real control port
               sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
               #sock.settimeout(10.0)
               sock.connect(self.configuration.SOCKET)
               tor_read_socket = sock.makefile("r")
               tor_write_socket = sock.makefile("w")

               # Authenticate
               tor_write_socket.write("AUTHENTICATE " + hexcookie + "\r\n")
               tor_write_socket.flush()
               answer = tor_read_socket.readline()
               answer_strip = answer.strip()
               if not answer_strip == "250 OK":
                   raise UnexpectedAnswer("AUTHENTICATE failed, Tor replied: %s" % (answer_strip))
        except (IOError, UnexpectedAnswer) as e:
            logger.error(e)

        try:
            logger.debug('111')
            # Send the request
            tor_write_socket.write(request + '\r\n')
            tor_write_socket.flush()

            logger.debug('222')
            while True:
                # Read in a newline terminated line
                logger.debug('333')
                answer = tor_read_socket.readline()
                #answer = tor_read_socket.recv()
                if not answer:
                    logger.debug('do_request: tor_read_socket.readline failed.')
                    break

                logger.debug('444')

                #answer = sock.recv(self.configuration.LIMIT_STRING_LENGTH)
                #answer_strip = answer.strip()
                #sock.close()

                logger.debug('Tor answer: %s' % (answer))
                incoming_socket.write(answer)
                incoming_socket.flush()
                logger.debug('do_request continue.')

            return True

        except (IOError, UnexpectedAnswer) as e:
            logger.error(e)

    def request_contains_wildcard(self, request):
        for item in self.configuration.WHITELIST:
            if '*' in item:
                item = item[:len(item)-2]
                if item in request:
                    return True
        return False

    def stream_server_handler(self, sock, address):
        logger.debug('Getting connection from address "%s" sock "%s"' % (address, sock))

        do_break = False

        incoming_socket = sock.makefile()
        # Keep accepting requests
        while True:
            # Read in a newline terminated line
            # TODO: impose maximum string length.
            rline = incoming_socket.readline()

            if not rline:
                logger.debug('stream_server_handler: incoming_socket.readline failed.')
                break

            # Strip escaped chars and white spaces.
            # Convert to lowercase.
            request = rline.lower().strip()

            logger.info('request: %s' % (request))

            # Authentication request.
            if request.startswith("authenticate"):
                # Don't check authentication, since only
                # safe requests are allowed
                answer = "250 OK\r\n"

            elif request.startswith("authchallenge"):
                answer = "250 AUTHCHALLENGE SERVERHASH=D3A6FF5943582E95E3B8C5449AF30EC6A11BBB1513DE0ED9ED50AC6075046F48 SERVERNONCE45CBD16FCF5D9A529F0B3BF0F04E677609CDADA11E0\r\n"

            elif request.startswith("quit"):
                answer = self.do_request(request, incoming_socket)
                do_break = True

            elif (request == 'getinfo net/listeners/socks' and self.configuration.LIMIT_GETINFO_NET_LISTENERS_SOCKS):
                answer = '250-net/listeners/socks="127.0.0.1:9150"\r\n'

            elif (self.configuration.ALLOW_WILDCARDS and self.request_contains_wildcard(request)):
                answer = self.do_request(request, incoming_socket)

            elif self.configuration.DISABLE_FILTERING:
                answer = self.do_request(request, incoming_socket)

            elif request in self.configuration.WHITELIST:
                answer = self.do_request(request, incoming_socket)

            else:
                # Everything else we ignore/block
                answer = "510 Request filtered\r\n"

            answer_strip = answer.strip()
            logger.info('answer: "%s"' % (answer_strip))

            incoming_socket.write(answer)
            incoming_socket.flush()

            if do_break == True:
                break

        logger.debug('End of connection from address "%s" sock "%s"' % (address, sock))

    def run(self):
        gevent.signal(signal.SIGTERM, self.signal_sigterm_handler)

        self.configuration = Configuration()
        message = self.configuration.read()
        if message is not None:
            logger.warning(message)

        # Catch server exceptions.
        try:
            logger.debug("Trying to start Tor control port filter on IP %s port %s"
                        % (self.configuration.IP, self.configuration.PORT))
            # Accept concurrent connections.
            server = StreamServer((self.configuration.IP, self.configuration.PORT), self.stream_server_handler,
                                spawn=self.configuration.CONTROL_PORT_FILTER_CONCURRENT_CONNECTIONS_LIMIT)

            logger.debug("Tor control port filter started, listening on IP %s port %s"
                        % (self.configuration.IP, self.configuration.PORT))
            server.serve_forever()
            logger.critical("We are after server.serve_forever() which should never happen!")

        except IOError as e:
            logger.critical('Server error %s' % (e))
            logger.critical('Exiting.')
            sys.exit(1)


if __name__ == "__main__":
    # Create logger.
    logger = logging.getLogger('CPFP log')
    logger.setLevel(logging.DEBUG)
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    handler = logging.FileHandler('/var/log/control-port-filter-python.log')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    # Create daemon.
    cpfp = ControlPortFilter()

    ## For debugging, comment out daemon_runner and use this.
    #cpfp.run()

    daemon_runner = runner.DaemonRunner(cpfp)

    # The daemon closes all the file handles by default.
    # Preserve the logger.
    daemon_runner.daemon_context.files_preserve=[handler.stream]

    # Start the daemon
    daemon_runner._start()
